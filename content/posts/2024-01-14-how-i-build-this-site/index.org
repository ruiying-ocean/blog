---
title: "How I Organise My Personal Blog"
date: 2024-01-14T15:42:30Z
draft: false
tag: "technical"
category: "Life"
---


I use =hugo= to build site. As stated in [[https://gohugo.io/getting-started/quick-start/][the official documentation]], hugo is a fast and flexible static site generator written in Golang.
It converts source markup files (e.g., org, markdown, Rmarkdown, quarto) to html file.

** A skeleton of website

Below is a copy from the hugo documentation.
#+begin_src
my-site/
├── archetypes (templates for new content)
├── assets
├── content (markup files)
├── data (data files (JSON, TOML, YAML, or XML) that augment content, configuration, localization, and navigation)
├── hugo.toml (configuration file)
├── images
├── layouts
├── netlify.toml (netlify configuration)
├── public (generated after building the site)
├── resources
├── static
└── themes (as the name says)
#+end_src

** Build locally
*** Command line
#+begin_src sh
hugo server -D
#+end_src

*** Rstudio + blogdown
I used `blogdown` for a while and I liked it. In particular, it supports the page bundle feature very well. That is, each new post has its own separate folder.
However, I give up this solution because Rstudio is too heavy and slow.

#+begin_src R
  blogdown::new_site()
  blogdown::serve_site() ## build local website
  blogdown::new_post() ## new post, usually pops up a UI
#+end_src

*** Emacs easy-hugo
This is a lightweight but good enough solution. You can type `easy-hugo-complete-tags` to do the auto-completion stuff. However, it does not support page bundle, but I can tolerate it.

There are also other packages in Emacs like [[https://ox-hugo.scripter.co/][ox-hugo]]. But it is more for the org-mode enthusiast.

** Depoly in the cloud
1. [[https://gohugo.io/hosting-and-deployment/hosting-on-github/][Github Pages]]
2. [[https://gohugo.io/hosting-and-deployment/hosting-on-netlify/][Netlify]]
